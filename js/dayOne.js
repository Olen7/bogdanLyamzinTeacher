"use strict" //строгий режим
// let a - обявлення 
// = 5 ініціалізація
let a = 5;
if (true) {
 let a = 6; 
 var b = 3;

}
// Літери (латинські: a-z або A-Z).
// Символу підкреслення (_).
// Знаку долара ($).
// Після першого символу можуть використовуватись літери, цифри, підкреслення або знак долара.

// Не можна починати ім’я змінної з цифри.

// Заборонено використовувати зарезервовані слова в якості імен змінних.
//список зарезервованих ключових слів
//https://s3.eu-north-1.amazonaws.com/lms.goit.files/60d669bd-de14-43bf-8b18-7c89e056d7d3m01-b02-s04.jpg

// console.log(b);
// var b = 3;
//{} - це фігурні дужки це область видимості

// function c(){
//    var x = 10;
// //    console.log(x);
// }
// c()
// // console.log(x);
// g = 6;
// console.log(g);
// console.log(window.g);

// У нестрогому режимі JavaScript можна оголосити змінну без ключових слів var, let, або const. У такому випадку змінна автоматично стає глобальною. 
// Проте це вважається поганою практикою, оскільки може призвести до помилок і неконтрольованої поведінки.
// У строгому режимі ("use strict") оголошення змінної без ключового слова призводить до помилки. Завжди використовуйте let, const, або var для чіткого оголошення змінних.




// const name = "Микола";
// const activeUser = "Міша"// currentUser
// let userName = "Роман";
// const userLastName = "Громов";
// const fullName = userName + " " + userLastName;
// const fullName2 = `${userName}  ${userLastName}`;// шаблона строка `${userName}  ${userLastName}`  ` - зворотні дужки (скіс)
// console.log(fullName);
// console.log(fullName2);

// В JavaScript ім’я змінної повинно починатися з:



////////////////////////////////////////////////////////////
// console.log("g" < 't');
// console.log("Ab" > "AB");
// Строки порівнюються посимвольно за їхніми Unicode значення. Порівняння йде зліва направо, поки не знайдеться перший різний символ. Якщо всі символи збігаються, строка вважається рівною.
// Великі літери мають менші значення, ніж малі, тому "A" < "a". Ключове: порівняння йде за порядком Unicode кодів символів.

// "JavaScript намагається перетворити об'єкти і строки на числа, якщо одна з частин виразу є числом. Але якщо обидва значення — "
// "строки, порівняння відбувається як порівняння рядків за Unicode.";

const aUniCode = "a";
const bUniCode = "b";
const aUniCodeUpperCase = "A";
console.log(aUniCode.charCodeAt(0));
console.log(bUniCode.charCodeAt(0));
console.log(aUniCodeUpperCase.charCodeAt(0));
//charCodeAt(0) - показує юні код

// console.log(null < 1);// null = 0
// console.log("" < 1);// "" = 0
// console.log(false < 1)
// console.log(undefined < 1)// undefined перетворюється на NaN
// console.log(" " < 1)// " " строки (пробіл)  = 0
// console.log(undefined == 0)
// console.log(false == 0)

// console.log("1" === 1);
// console.log(NaN === NaN);
// const j = 5;
// const l = 15;

// if (j > l){
//  console.log(j + l);
//  // 0 = false
//  // 25 = true
//  // NaN = false
//  // " " = true
//  // "" = false
//  // undefined = false
//  // null = false
// }else if(j < l){
//     console.log(j - l);
// }else{
//     console.log(object);
// }

//                                            Домашнє завдання
// Логічні оператори 
// Існує 4 логічні оператори, які використовуються для перевірки виконання множинних виразів.
// Вираз у програмуванні — це комбінація значень, змінних, операторів і функцій, яка при виконанні обчислює певне значення.
// Числовий вираз: 5 + 3
// Вираз з змінними: x * 10
// Логічний вираз: age > 18
// Функціональний вираз: Math.max(3, 7)

// && - «І»
// Оператор && приводить всі операнди до буля і повертає значення одного з них. Лівий операнд - якщо 
// його можна привести до false, і правий - в інших випадках.
// Операнди в JavaScript — це значення, до яких застосовуються оператори.

// Оператор: +
// Операнди: 5 і 3

// Операнди можуть бути:
// Числами: 5 + 3
// Змінними: x * y
// Рядками: "Hello " + "world!"
// Виразами: (a + b) * c


// // || - «АБО»
// Оператор || приводить всі операнди до буля і повертає значення одного з них. 
// Лівий операнд - якщо його можна привести до true, і правий - в інших випадках.

// ! - «НЕ»
// Оператор ! приводить операнд до буля, якщо необхідно, а потім робить інверсію - 
// змінює його на протилежний

// Оператор !! — це подвійне логічне заперечення.

// Оператор злиття null ?? - Якщо value1 не є null або undefined, результатом буде value1.
// let result = value1 ?? value2;


// 6 хибних (falsy) значень
// false - булеве значення false.
// 0 - числове значення нуль.
// "" або '' - порожній рядок.
// null - значення, яке означає відсутність значення або порожнє значення.
// undefined - значення, яке вказує, що змінну було оголошено, але їй не присвоєно значення.
// NaN - значення "Not-a-Number", яке зазвичай виникає при невдалих математичних операціях.

// function аргументи, параметри, як її створити, як називається функція, патерн 
// ранне повернення, відмінності стрілочної функцій

//  параметри і аргументи 
function add(a = 0, b) { // (a і b) — це параметри a = 0  - параметр за замовчуванням
    return a + b;
  }
  
  console.log(add(2, 3)); // 2 і 3 — це аргументи
// Function Declaration можна використовувати у всьому скрипті (або блоці коду, якщо функцію 
//     оголошено в блоці)."
function myFunctionDeclaration() {
    
}


//                                        Function Declaration


//ім’я функції обов'язкове в Function Declaration.
//одна з ключових особливостей Function Declaration — функції підлягають "підняттю" (hoisting). Це означає, що ви можете викликати функцію до її фактичного оголошення в коді
//Function Declaration можуть бути оголошені як у глобальному контексті (тобто доступні по всьому скрипту), так і в локальному (всередині іншої функції)
//Хоча Function Declaration створює функцію, яка є доступною глобально або в межах свого контексту, вона все ще може бути перезаписана як будь-яка інша змінна:
//   function greet() {
//     console.log("Hello!");
//   }

//   greet = function() {
//     console.log("Hi!");
//   };

//   greet(); // "Hi!"


//                                         Function Expression


// "Function Expression створюється, коли виконання доходить до нього, а потім вже може 
// використовуватися. 
const myFunctionExpression = function() { //Function Expression може бути як анонімною (без імені const sayHello = function(){}), так і іменованою const sayHello = function greet(){}
    
  };
  //Function Expression виконується тільки тоді, коли до неї звертаються через змінну:
  //Ця функція не виконується під час завантаження скрипта, на відміну від Function Declaration.
  //На відміну від Function Declaration, функціональні вирази не піднімаються (hoisting) на верхівку свого контексту:


//                                         Стрілочна функції =>


// Стрілочна функції також є виразами функції:
  const myArrowFunction = () => {
    
  };
    //Якщо функція має лише один параметр, круглі дужки () можна опустити 
    //Якщо немає параметрів, потрібно використовувати порожні круглі дужки
    //Якщо потрібно виконати більше одного виразу, або є блок коду, необхідно використовувати фігурні дужки {} та явно використовувати return для повернення значення



// Патерн «Раннє повернення» - це спосіб використовувати можливість дострокового повернення з функції за допомогою оператора return. 
  
function arr(){
  return
}
const calc = function(){
  return
}
const h = (q,p) => q + p;
const c = () => {
  return
}